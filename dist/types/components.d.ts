/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */


import {
  MouseCat as MouseCat
} from './components/mouse-cat/mouse-cat';

declare global {
  interface HTMLMouseCatElement extends MouseCat, HTMLElement {
  }
  var HTMLMouseCatElement: {
    prototype: HTMLMouseCatElement;
    new (): HTMLMouseCatElement;
  };
  interface HTMLElementTagNameMap {
    "mouse-cat": HTMLMouseCatElement;
  }
  interface ElementTagNameMap {
    "mouse-cat": HTMLMouseCatElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "mouse-cat": JSXElements.MouseCatAttributes;
    }
  }
  namespace JSXElements {
    export interface MouseCatAttributes extends HTMLAttributes {
      mouse?: any;
    }
  }
}


import {
  MousePlaceholder as MousePlaceholder
} from './components/mouse-placeholder/mouse-placeholder';

declare global {
  interface HTMLMousePlaceholderElement extends MousePlaceholder, HTMLElement {
  }
  var HTMLMousePlaceholderElement: {
    prototype: HTMLMousePlaceholderElement;
    new (): HTMLMousePlaceholderElement;
  };
  interface HTMLElementTagNameMap {
    "mouse-placeholder": HTMLMousePlaceholderElement;
  }
  interface ElementTagNameMap {
    "mouse-placeholder": HTMLMousePlaceholderElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "mouse-placeholder": JSXElements.MousePlaceholderAttributes;
    }
  }
  namespace JSXElements {
    export interface MousePlaceholderAttributes extends HTMLAttributes {
      mouse?: any;
    }
  }
}


import {
  MouseState as MouseState
} from './components/mouse-state/mouse-state';

declare global {
  interface HTMLMouseStateElement extends MouseState, HTMLElement {
  }
  var HTMLMouseStateElement: {
    prototype: HTMLMouseStateElement;
    new (): HTMLMouseStateElement;
  };
  interface HTMLElementTagNameMap {
    "mouse-state": HTMLMouseStateElement;
  }
  interface ElementTagNameMap {
    "mouse-state": HTMLMouseStateElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "mouse-state": JSXElements.MouseStateAttributes;
    }
  }
  namespace JSXElements {
    export interface MouseStateAttributes extends HTMLAttributes {
      _render?: any;
    }
  }
}


import {
  MouseTracker as MouseTracker
} from './components/mouse-tracker/mouse-tracker';

declare global {
  interface HTMLMouseTrackerElement extends MouseTracker, HTMLElement {
  }
  var HTMLMouseTrackerElement: {
    prototype: HTMLMouseTrackerElement;
    new (): HTMLMouseTrackerElement;
  };
  interface HTMLElementTagNameMap {
    "mouse-tracker": HTMLMouseTrackerElement;
  }
  interface ElementTagNameMap {
    "mouse-tracker": HTMLMouseTrackerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "mouse-tracker": JSXElements.MouseTrackerAttributes;
    }
  }
  namespace JSXElements {
    export interface MouseTrackerAttributes extends HTMLAttributes {
      
    }
  }
}

